      


show databases;
use module;
drop table dept;
create table dept(DEPTNO int(2),DNAME varchar(15),LOC varchar(10));
desc dept;
insert into dept values(10,'ACCOUNTING','NEW YORK'),(20,'RESEARCH','DALLAS'),(30,'SALES','CHICAGO'),(40,'OPERATIONS','BOSTON');
SELECT * FROM DEPT;

DROP TABLE EMP;
create table emp(EMPNO int(4),ENAME varchar(10),JOB varchar(9),HIREDATE date,SAL float(7,2),COMM float(7,2),DEPTNO int(2));
desc emp;
insert into emp values(7499,'ALLEN','SALESMAN','1981-02-20',1600,300,30);
SELECT * FROM EMP;

=================================================================================================================================================================================
#Display all the employees where SAL between 2500 and 5000 (inclusive of both).
select * from emp where sal between 2500 and 5000;

#Display all the ENAMEs in descending order of ENAME.
select ename from emp order by ename desc;

#Display all the JOBs in lowercase.
select lower(job) as 'JOBS' from emp;

#Display the ENAMEs and the lengths of the ENAMEs.
select ename,length(ename) AS 'ENAME' from emp;

#Display the DEPTNO and the count of employees who belong to that DEPTNO
select deptno,count(ename) from emp group by deptno;

#Display the DNAMEs and the ENAMEs who belong to that DNAME.
select dname,ename from emp,dept where dept.deptno=emp.deptno;

#Display the position at which the string ‘AR’ occurs in the ename.
select instr(ename,'AR') from emp;  

#Display the HRA for each employee given that HRA is 20% of SAL.  
select ename,sal*20/100 as 'HRA' from emp; 

============================================================================================================================================================================================
Q1. Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. Your procedure should then determine if the first varchar string exists inside the 
    varchar string. For example, if string1 = ‘DAC’ and string2 = ‘CDAC, then string1 exists inside string2.
    The stored procedure should insert the appropriate message into a suitable TEMPP output table. Calling program for the stored procedure need not be written.

ANSWER = 

delimiter //
create procedure PROC1(string1 varchar(20),string2 varchar(20))
begin
     declare x int;
     set x = (instr(string2,string1));
     if x=0 then 
             insert into temp1 values(x,'string1 doesnt exists inside string2');
     else         
		     insert into temp1 values(x,'string exist inside str2');
     end if;        
end; // 
delimiter //	 

call PROC1('DAC','DAC');
SELECT * FROM TEMP1;

==============================================================================================================================================================================================
Q2. Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle. The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise. 
A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.


delimiter //
create function FUNC1(a1 int,a2 int,a3 int)
returns boolean
deterministic
begin
      if a1<(a2+a3) and a2<(a1+a3) and a3<(a1+a2) then
          return true ;
      else
          return false;
      end if ;
 end ; //
  delimiter //
  
  create table TRIANGLE
  (a1 int,a2 int,a3 int,Output varchar(25));
  
  
  delimiter //
  create procedure tri(a int,b int, c int)
  begin
       if FUNC1(a,b,c) then 
           insert into TRIANGLE values(a,b,c,'VALID TRIANGLE');
       else 
           insert into TRIANGLE values(a,b,c,'INVALID TRIANGLE');
       end if;
  end ; // 
  delimiter ;
  
  call tri(10,20,30);
  call tri(30,20,30);
  select * from TRIANGLE;
===================================================================================================================================================================================

